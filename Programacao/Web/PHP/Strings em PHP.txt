Strings

Strings no PHP tambem são tratadas como arrays
ou seja é possivel acessar caracteres de uma string 
por meio de um indice

ex:

$a = "abc";
$b = $a[1]; // $b = "b";
=======================================================

'Texto' = este texto sera imprimido exatamente como esta escrito

"Texto" = este texto sera imprimido com caracteres de escape 
	  e variaveis processadas



Caracteres de Escape
\n nova linha;
\r retorno de carro (semelhante a \n)
\t tabulação horizontal
\\ a própria barra (\)
\$ o símbolo $
\’ aspas simples
\” aspas duplas
 . Operador de concatenação(ponto)

-------------------------------------------------------
Strings heredoc

Servem para se echoar varias linhas de string facilmente

sintaxe

echo <<IDF

string
string
string

IDF



IDF = identificador de fechamento pode ser qualquer palavra

==============================================================
Regular Expressions em PHP

Regular expressions em php utilizam a mesma
sintaxe do javascript para RegEx(/regex/)
dentro do metodo preg_match()

-------------------------------------------------
Metodo preg_match()

Sintaxe:

preg_match("/regex/",$stringEmQuestão,$ArrayComPalavrasEcontradas);

*Apenas os dois primeiros parametros são obrigatorios

- "/regex/" //string com o codigo da Regular Expression como no javascript entre //
- $stringEmQuestão //a string a ser comparada com a regular expression
- $ArrayComPalavrasEcontradas(opcional) //um array que contem as palavras do array que são matches da regular expression


O metodo preg_match() retorna 1 se a string estiver no padrão da RegEx e 0 se não estiver
ou FALSE se ocorrer um erro  

================================================================
Metodos de String

//To ASCII From ASCII

ord()	Returns the ASCII value of the first character of a string
chr()	Returns a character from a specified ASCII value

//Trims

ltrim()	Removes whitespace or other characters from the left side of a string
rtrim()	Removes whitespace or other characters from the right side of a string
trim()	Removes whitespace or other characters from both sides of a string
chop()	Removes whitespace or other characters from the right end of a string

//Uppercase e Lowercase

lcfirst()	Converts the first character of a string to lowercase
strtolower()	Converts a string to lowercase letters
strtoupper()	Converts a string to uppercase letters
ucfirst()	Converts the first character of a string to uppercase
ucwords()	Converts the first character of each word in a string to uppercase

//To array From array

explode()	Breaks a string into an array
implode()	Returns a string from the elements of an array
str_split()	Splits a string into an array

//Comparação

strcasecmp()	Compares two strings (case-insensitive)
strcmp()	Compares two strings (case-sensitive)
strcoll()	Compares two strings (locale based string comparison)
strnatcmp()	Compares two strings using a "natural order" algorithm (case-sensitive)
strncasecmp()	String comparison of the first n characters (case-insensitive)
strncmp()	String comparison of the first n characters (case-sensitive)
strnatcasecmp()	Compares two strings using a "natural order" algorithm (case-insensitive)

//Substrings e pesquisa

substr()		Returns a part of a string
substr_compare()	Compares two strings from a specified start position (binary safe and optionally case-sensitive)
substr_count()		Counts the number of times a substring occurs in a string
substr_replace()	Replaces a part of a string with another string
strripos()		Finds the position of the last occurrence of a string inside another string (case-insensitive)
strrpos()		Finds the position of the last occurrence of a string inside another string (case-sensitive)
strspn()		Returns the number of characters found in a string that contains only characters from a specified charlist
strstr()		Finds the first occurrence of a string inside another string (case-sensitive)
strtok()		Splits a string into smaller strings
chunk_split()	Splits a string into a series of smaller parts
stripos()	Returns the position of the first occurrence of a string inside another string (case-insensitive)
stristr()	Finds the first occurrence of a string inside another string (case-insensitive)
strchr()	Finds the first occurrence of a string inside another string (alias of strstr())
strpbrk()	Searches a string for any of a set of characters
strpos()	Returns the position of the first occurrence of a string inside another string (case-sensitive)
strrchr()	Finds the last occurrence of a string inside another string

//length

strlen()	Returns the length of a string
str_pad()	Pads a string to a new length
str_word_count()	Count the number of words in a string

//Inverse & Random

strrev()	Reverses a string
str_shuffle()	Randomly shuffles all characters in a string

//replace

str_ireplace()	Replaces some characters in a string (case-insensitive)
str_replace()	Replaces some characters in a string (case-sensitive)

//repeat

str_repeat()	Repeats a string a specified number of times

//output 

echo()	Outputs one or more strings
print()	Outputs one or more strings
printf()	Outputs a formatted string
fprintf()	Writes a formatted string to a specified output stream
vfprintf()	Writes a formatted string to a specified output stream
vprintf()	Outputs a formatted string

-----------------------------------------------------------------------------------------
Outros metodos

addcslashes()	Returns a string with backslashes in front of the specified characters
addslashes()	Returns a string with backslashes in front of predefined characters
bin2hex()	Converts a string of ASCII characters to hexadecimal values
convert_cyr_string()	Converts a string from one Cyrillic character-set to another
convert_uudecode()	Decodes a uuencoded string
convert_uuencode()	Encodes a string using the uuencode algorithm
count_chars()	Returns information about characters used in a string
crc32()	Calculates a 32-bit CRC for a string
crypt()	One-way string encryption (hashing)
get_html_translation_table()	Returns the translation table used by htmlspecialchars() and htmlentities()
hebrev()	Converts Hebrew text to visual text
hebrevc()	Converts Hebrew text to visual text and new lines (\n) into <br>
hex2bin()	Converts a string of hexadecimal values to ASCII characters
html_entity_decode()	Converts HTML entities to characters
htmlentities()	Converts characters to HTML entities
htmlspecialchars_decode()	Converts some predefined HTML entities to characters
htmlspecialchars()	Converts some predefined characters to HTML entities
levenshtein()	Returns the Levenshtein distance between two strings
localeconv()	Returns locale numeric and monetary formatting information
md5()	Calculates the MD5 hash of a string
md5_file()	Calculates the MD5 hash of a file
metaphone()	Calculates the metaphone key of a string
money_format()	Returns a string formatted as a currency string
nl_langinfo()	Returns specific local information
nl2br()	Inserts HTML line breaks in front of each newline in a string
number_format()	Formats a number with grouped thousands
parse_str()	Parses a query string into variables
quoted_printable_decode()	Converts a quoted-printable string to an 8-bit string
quoted_printable_encode()	Converts an 8-bit string to a quoted printable string
quotemeta()	Quotes meta characters
setlocale()	Sets locale information
sha1()	Calculates the SHA-1 hash of a string
sha1_file()	Calculates the SHA-1 hash of a file
similar_text()	Calculates the similarity between two strings
soundex()	Calculates the soundex key of a string
sprintf()	Writes a formatted string to a variable
sscanf()	Parses input from a string according to a format
str_getcsv()	Parses a CSV string into an array
str_rot13()	Performs the ROT13 encoding on a string
strcspn()	Returns the number of characters found in a string before any part of some specified characters are found
strip_tags()	Strips HTML and PHP tags from a string
stripcslashes()	Unquotes a string quoted with addcslashes()
stripslashes()	Unquotes a string quoted with addslashes()
strtr()	Translates certain characters in a string
vsprintf()	Writes a formatted string to a variable
wordwrap()	Wraps a string to a given number of characters