Array

Array é uma variavel que representa um conjunto de dados
que são recuperados por meio de indices

==========================================================
Criando um array

Preenchido:

Sintaxe:

$array = array(
	índice => valor, índice=>valor, ...
	)

*O valor do indice pode ser um inteiro ou uma string

------------------------------------------------------
Vazio

Sintaxe:

$array = array();

$array[indice] = dado;

*O valor do indice pode ser um inteiro ou uma string
*O codigo funcionaria apenas com a segunda linha ja que
 o php recnheceria a variavel array como um array automaticamente


-----------------------------------------------------
Preenchido com indice automatico

sintaxe:

$array = array(dado1,dado2,dado3...);

*Um indice automatico(inteiro) sera dado a cada um dos dados
começando do primeiro dado com o indice 0
======================================================
Recuperando o valor de um array

$dado = $array[indice];

======================================================
Arrays multidimensionais

Arrays podem ter mais de uma dimensão
basta adicionar extra chaves []

Ex:

//array 2 dimensões

$array = array();

$array["vasco"]["goleiro"] = "joão";

//array 3 dimensões

$array = array();

$array["vasco"]["goleiro"][1] = "josé";

//etc...

=======================================================

Exemplo

$frutas = array(1 => "Laranja",2 => "Maçã",3 => "Uva");
echo "<li> $frutas[1]<br>";
echo "<li> $frutas[2]<br>";
echo "<li> $frutas[3]<br>";

=======================================================
Funções de array em PHP

//Criar um array

array()			Creates an array

//Tamanho do array

count()			Returns the number of elements in an array
sizeof()		Alias of count()

//Preencher Array

array_fill()		Fills an array with values
array_fill_keys()	Fills an array with values, specifying keys

//Array como Fila

array_pop()		Deletes the last element of an array
array_push()		Inserts one or more elements to the end of an array
array_shift()		Removes the first element from an array, and returns the value of the removed element
array_unshift()		Adds one or more elements to the beginning of an array

//Replace

array_replace()		Replaces elements from passed arrays into the first array
array_replace_recursive()	Replaces elements from passed arrays into the first array recursively


//Array random e math

array_rand()		Returns one or more random keys from an array
array_sum()		Returns the sum of the values in an array
array_product()		Calculates the product of the values in an array


//Pesquisa


array_keys()		Returns all the keys of an array
array_values()		Returns all the values of an array
array_search()		Searches an array for a given value and returns the key
in_array()		Checks if a specified value exists in an array
key()			Fetches a key from an array
array_key_exists()	Checks if the specified key exists in the array


//Sub-arrays

array_slice()		Returns selected parts of an array
array_splice()		Removes and replaces specified elements of an array
array_merge()		Merges one or more arrays into one array
array_merge_recursive()	Merges one or more arrays into one array

//toString

array_reduce()		Returns an array as a string, using a user-defined function

//Filtros

array_filter()		Filters the values of an array using a callback function
array_unique()		Removes duplicate values from an array
array_walk()		Applies a user function to every member of an array
array_walk_recursive()	Applies a user function recursively to every member of an array

//Navegação

reset()			Sets the internal pointer of an array to its first element
end()			Sets the internal pointer of an array to its last element
current()		Returns the current element in an array
next()			Advance the internal array pointer of an array
pos()			Alias of current()
prev()			Rewinds the internal array pointer
each()			Returns the current key and value pair from an array

//Ordenação

sort()			Sorts an indexed array in ascending order
uasort()		Sorts an array by values using a user-defined comparison function
uksort()		Sorts an array by keys using a user-defined comparison function
usort()			Sorts an array using a user-defined comparison function
rsort()			Sorts an indexed array in descending order
shuffle()		Shuffles an array
array_reverse()		Returns an array in the reverse order
arsort()		Sorts an associative array in descending order, according to the value
asort()			Sorts an associative array in ascending order, according to the value
krsort()		Sorts an associative array in descending order, according to the key
ksort()			Sorts an associative array in ascending order, according to the key
natcasesort()		Sorts an array using a case insensitive "natural order" algorithm
natsort()		Sorts an array using a "natural order" algorithm
array_multisort()	Sorts multiple or multi-dimensional arrays

//Comparar arrays

array_diff()		Compare arrays, and returns the differences (compare values only)
array_diff_assoc()	Compare arrays, and returns the differences (compare keys and values)
array_diff_key()	Compare arrays, and returns the differences (compare keys only)
array_diff_uassoc()	Compare arrays, and returns the differences (compare keys and values, using a user-defined key comparison function)
array_diff_ukey()	Compare arrays, and returns the differences (compare keys only, using a user-defined key comparison function)
array_udiff()		Compares array values in a user-made function and returns an array
array_udiff_assoc()	Compares array keys, and compares array values in a user-made function, and returns an array
array_udiff_uassoc()	Compares array keys and array values in user-made functions, and returns an array
array_uintersect()	Compares array values in a user-made function and returns an array
array_change_key_case()	Changes all keys in an array to lowercase or uppercase
array_chunk()		Splits an array into chunks of arrays
array_combine()		Creates an array by using the elements from one "keys" array and one "values" array
array_count_values()	Counts all the values of an array
array_intersect()	Compare arrays, and returns the matches (compare values only)
array_intersect_assoc()	Compare arrays and returns the matches (compare keys and values)
array_intersect_key()	Compare arrays, and returns the matches (compare keys only)
array_intersect_uassoc()	Compare arrays, and returns the matches (compare keys and values, using a user-defined key comparison function)
array_intersect_ukey()	Compare arrays, and returns the matches (compare keys only, using a user-defined key comparison function)
array_uintersect_assoc()	Compares array keys, and compares array values in a user-made function, and returns an array
array_uintersect_uassoc()	Compares array keys and array values in user-made functions, and returns an array


//Outros

array_flip()		Flips/Exchanges all keys with their associated values in an array
array_map()		Sends each value of an array to a user-made function, which returns new values
array_pad()		Inserts a specified number of items, with a specified value, to an array
compact()		Create array containing variables and their values
extract()		Imports variables into the current symbol table from an array
list()			Assigns variables as if they were an array
range()			Creates an array containing a range of elements