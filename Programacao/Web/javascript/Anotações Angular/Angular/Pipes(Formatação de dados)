Pipes(Formatação de dados)

Pipes são uma funcionalidade utilizada junto a string interpolation
para a transformação e formatação de dados na tela, existem varios
pipes pré definidos para formatações comuns e também é possivel
definir pipes customizados.
-----------------------------------------------------------------------------------------------------------------------
Ex:

{{ atributo | uppercase }} // Exibe o valor do atributo como uppercase através do filtro uppercase.
==============================================================
Passando parametros para pipe

Pipes podem receber nenhum, um ou muitos parametros dependendo
da sua implementação, a sintaxe para a passagem de parametros é:

{{atributo | pipe:param1:param2:param3:...:paramN}}
==============================================================
Pipe date

Pipe para formatação de datas recebe um parametro que  é o
formato da data definido na documentação:

https://angular.io/api/common/DatePipe

------------------------------------------------------------------------------------------------------------------------------
Ex:

<div class="row">
  <h4>{{dataTeste | date: 'dd/MM/yyyy'}}</h4>
 </div>
==============================================================
Criando um novo pipe

1. Declarar uma nova classe que implementa a interface PipeTransform e
tem a anotação @Pipe com um name definido para o nome que será utilizado
para fazer referencia aos pipes nas telas.

A interface PipeTransform obriga a implementação do método transform()
que recebe o dado para transformar e retorna ele, o dado pode ser de qualquer
tipo mas geralmente é string

O primeiro parametro que o método transform() recebe é o dado a transformar
os outros parametros são os parametros passados para o pipe na tela.

Ex:

@Pipe({name: "descricaoReduzida"})
export class DescricaoReduzida implements PipeTransform{
    public transform(descricao: string, param: number): string{
        if(descricao.length > 15){
            descricao = descricao.substr(0, 15) + "..."
        }
        console.log(param)
        return descricao
    }
}

2. Declarar a classe do pipe no módulo na anotação @NgModule
na seção declarations.

Ex:


@NgModule({
  declarations: [
	...
    DescricaoReduzida
 
  ],
...
})

3. Utilizar o pipe em telas como qualquer outro pipe

<div>
<!-- Sintaxe {{conteudo | nomeDoPipe:param1:param2:...}}-->
  {{texto | descricaoReduzida: 123456}}
</div>

========================================================
Pipe async

O pipe async serve para resolver observables em seus valores
resolvidos na tela para que não seja necessário fazer subscribe
e atribuir a um atributo da classe o atributo async transforma o
observable no retorno dele para utilização na tela.

ngFor="item in observableQueSeResolveEmUmArray | async"