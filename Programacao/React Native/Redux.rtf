{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red47\green255\blue18;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c15686\c99608\c7843;\csgray\c0\c90000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Redux\
\
action = object javascript que tem um type e informa\'e7\'f5es sobre o que um reducer deve fazer para \
criar um novo state.\
reducer = fun\'e7\'e3o que processa actions e retorna um novo state \
state = object javascript que representa todo o estado a aplica\'e7\'e3o\
store = container de reducers e state\
\
==============================================\
Exemplo\
\
const reducer = (state = [], action) => \{\
	if(action.type === 'split_string')\{\
  	return action.payload.split('')\
  \}\
  \
  return state\
\}\
\
const store = Redux.createStore(reducer)\
\
store.getState()\
\
const action = \{\
	type: 'split_string',\
  payload: 'asdf'\
\}\
\
store.dispatch(action)\
\
store.getState()\
===============================================\
Instala\'e7ao\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 \CocoaLigature0 npm install --save redux react-redux}