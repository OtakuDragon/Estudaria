Controlando o fechamento da aplicação JavaFX

É possível tratar o evento de requisição de fechamento
que é disparado quando o usuário clica no X da janela,
neste event handler, é possível decidir se a janela deve
ser fechada ou não.

Caso ela não possa ser fechada deve se consumir o evento
de fechamento através do método consume, para parar a requisição
de fechamento.
========================================================================
Formas de fechamento

Os Stages possuem o método close() que fecha a janela que 
o Stage representa, e a aplicação caso não tenha nenhum
outro Stage aberto, se houver outro Stage aberto apenas o Stage
em que o método close() foi chamado será fechado.

Para fechar a aplicação JavaFX como um todo independente
do Stage, é necessário chamar o método estático Platform.exit().

========================================================================
O método Application.close()

Quando a aplicação JavaFX é fechada de forma normal até mesmo
através da chamada Platform.exit() ela chama o método Application.close(),
antes de concluir o seu fechamento.

O que significa que sobreescrever este método é uma boa maneira de adicionar
funcionalidades de finalização de recursos da aplicação.
========================================================================
ex:

public static void main(String[] args) {
	launch();
}

@Override
public void start(Stage primaryStage) throws Exception {
	primaryStage.setTitle("Minha aplicação");
	primaryStage.setOnCloseRequest(windowEvent -> processarCloseRequest(windowEvent));
	
	StackPane layout = new StackPane();
	
	Scene scene = new Scene(layout, 300, 250);
	
	primaryStage.setScene(scene);
	primaryStage.show();	
}

private void processarCloseRequest(WindowEvent windownEvent){
	
	Alert confirmationAlert = new Alert(AlertType.CONFIRMATION);
	
	ButtonType answer = confirmationAlert.showAndWait().get();
	
	if(!ButtonType.OK.equals(answer)){
		//Consumir o evento e impedir a propagação.
		windownEvent.consume();
	}
	//Else propagar o evento e fechar a janela.
}
