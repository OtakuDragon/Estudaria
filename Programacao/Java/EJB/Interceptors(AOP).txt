Interceptors(AOP)

Interceptors são os elementos do EJB
responsaveis por "interceptar" chamadas
de metodos e executar codigo antes,durante
ou depois delas.

São basicamente uma versão mais simples
dos advices do spring
==================================================
Definindo interceptors

Interceptors são POJOs que possuem no minimo um metodo
anotado com a anotação @AroundInvoke este metodo
deve possuir a seguinte assinatura:

@AroundInvoke
public Object NomeDoMetodo(InvocationContext context) throws Exception{

//Se o metodo não retornar proceed() qualquer outro interceptor abaixo
//na hierarquia e o metodo interceptado não serão executados, isto abre
//a possibilidade de verificação de segurança e impedimento de execução como em
//um filtro http.
return context.proceed();
}

*obs: a Exception pode ser tratada dentro do metodo o throws não é obrigatorio

Este metodo será chamado pelo container sempre que um 
metodo for interceptado pelo interceptor

Para executar codigo após a execução do metodo basta inserir o codigo em um finally
ex:

@AroundInvoke
public Object log(InvocationContext ic) throws Exception {
  //Antes de execução
  logEntry();
  try {
    return ic.proceed();
  } finally {
    //Após a execução
    logExit();
  }
}

-------------------------------------------------
Lifecycle callbacks em interceptors

O metodo anotado com @AroundInvoke é executado
sempre que um metodo é interceptado mas está não
é o unico metodo que um interceptor pode ter

ele tambem pode ter metodos anotados com 4 outras 
anotações, os 4 lifecycle callbacks:

*@PostConstruct
*@PrePassivate
*@PostActivate 
*@PreDestroy

Se o interceptor for em nivel de classe ele executará
os metodos anotados com as anotações de callback quando
as mudanças de estado acontecerem da mesma maneira que
aconteceria se os metodos estivessem na classe

isto não impede que a classe tenha metodos de callback
ou varios interceptores tenham metodos de callback, todos
eles serão executados.

ex:

@PostConstruct
public void initialize (InvocationContext context) {//neste caso o metodo não joga exceção como no @AroundInvoke
...

//O proceed tambem precisa acontecer aqui para que
//qualquer outro callback abaixo da hierarquia tambem
//seja executado
context.proceed();
}
--------------------------------------------------
O Parametro InvocationContext

Quando o metodo anotado com @AroundInvoke é executado
o container passa para ele um objeto que implementa InvocationContext
contendo todas as informações sobre a execução do metodo

Metodos de InvocationContext

context.getTarget() - Recupera a instancia do bean que executará
                      o metodo de negocio como um Object

context.getMethod()  - Recupera o objeto de reflexão Method que possui
                       todas as informações do metodo que será executado

context.getParameters()- Retorna um array de Object com os parametros sendo passados
                         para o metodo.

context.setParameters() - Recebe um array de Object e substitui os parametros sendo passados para
                          o metodo pelos itens deste array

context.getContextData()- Retorna a referencia a um mapa<String,Object> que estará disponivel para todos
                          os proximos interceptors, dados colocados nele(put) poderão ser recuperados nos proximos
                          interceptors da corrente é utilizado como uma maneira de comunicação entre interceptors

context.proceed()     - Retorna um Object que diz ao container para continuar o fluxo de execução do metodo						  
===================================================
Atribuindo interceptors

Interceptors são Atribuidos atraves da anotação
@Interceptors, ela recebe o simple name da classe
que implementa o interceptor ou uma lista de simple
names das classes dos interceptors caso deseje-se
adicionar multiplos

Interceptors podem ser atribuidos em 3 niveis:

* Default - definido no web.xml(deployment descriptor) intercepta todos os metodos de todos os EJBs

* Classe  - Um interceptor em nivel de classe interceptará todos os metodos publicos do EJB

* Metodo  - O nivel mais baixo atribui o inerceptor diretamente ao qual ele deve interceptar

obs: No caso de varios niveis interceptarem o mesmo metodo o maior nivel será executado primeiro
     seguido dos outros em ordem decrescente

obs2:No caso de haver mais de um interceptor em um mesmo nivel será executado primeiro o que foi
     definido primeiro seja na anotação ou no web.xml
	 
@Interceptors(MeuInterceptor.class)
public class MinhaClasse{
..
}

@Interceptors({MeuInterceptor.class,OutroInterceptor.class})
public void meuMetodo (){
..
}
-------------------------------------------------------
Anulando interceptores 

há tambem casos nos quais nos não desejamos executar
o interceptor apenas para um metodo da classe ou desejamos
anular o interceptor default para uma classe nesses casos 
nós utilizamos as anotações:

@ExcludeDefaultInterceptors - Para interceptor padrão
@ExcludeClassInterceptors   - Para interceptor de classe

ex:

@Interceptors(MeuInterceptor.class)
@ExcludeDefaultInterceptors
@ExcludeClassInterceptors
public void meuMetodo (){
..
}
=========================================================
Definindo o default interceptor

no web.xml:

<assembly-descriptor>
	<interceptor-binding>
		<!--Asterisco significando todos os EJBs-->
		<ejb-name>*</ejb-name>
		<!--Full qualified name da classe do interceptor-->
		<interceptor-class>
			meusPacotes.MinhaClasse
		</interceptor-class>
	</interceptor-binding>
</assembly-descriptor>





	 