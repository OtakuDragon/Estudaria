Prototype Design Pattern

Prototype Design Pattern é um creational pattern que
tem como objetivo melhorar a performance das aplicações
guardando objeto pesados de se constuir em uma lista, em
uma classe de Cache, e retornando clones destes objetos
guardados quando eles são necessários ao invés de instancia-los
novamente.

O objeto pesado de se construir deve implementar a interface clone
able para que seja possível clona-lo.

====================================================================
ex:

//Classe abstrata que o objeto pesado extende
public abstract class Shape implements Cloneable { 
 
 private String id; 
 protected String type; 
 
 abstract void draw(); 
 
 public String getType(){ 
 return type; 
 } 
 
 public String getId() { 
 return id; 
 } 
 
 public void setId(String id) { 
 this.id = id; 
 } 
 
 public Object clone() { 
 Object clone = null; 
 try { 
 clone = super.clone(); 
 } catch (CloneNotSupportedException e) { 
 e.printStackTrace(); 
 } 
 return clone; 
 } 
} 

//Classe cuja as instancias teoricamente são
//resource heavy para a criação
public class Square implements Cloneable { 
 
 public Square(){ 
 type = "Square"; 
 } 
 
 @Override 
 public void draw() { 
 System.out.println("Inside Square::draw() method."); 
 } 
 
 Object clone = null; 
 try { 
 clone = super.clone(); 
 } catch (CloneNotSupportedException e) { 
 e.printStackTrace(); 
 } 
 return clone; 
 } 
} 

//Classe de cache
public class ShapeCache { 
 
 private static Hashtable<String, Shape> shapeMap 
 = new Hashtable<String, Shape>(); 
 
 public static Shape getShape(String shapeId) { 
 Shape cachedShape = shapeMap.get(shapeId); 
 return (Shape) cachedShape.clone(); 
 } 
 
 // for each shape run database query and create shape 
 // shapeMap.put(shapeKey, shape); 
 // for example, we are adding three shapes 
 public static void loadCache() { 
	
 Square square = new Square();  
 square.setId("1"); 
 shapeMap.put(square.getId(),square);
 }
}


//Recuperação da instancia em cache
public class PrototypePatternDemo { 
 public static void main(String[] args) { 
 ShapeCache.loadCache(); 
 
 Shape clonedShape = (Shape) ShapeCache.getShape("1"); 
 System.out.println("Shape : " + clonedShape.getType()); 

 } 
} 
