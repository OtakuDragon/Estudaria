Builder Design Pattern

Build desing pattern é um creational pattern que
tem como objetivo criar uma classe chamada builder
para efetuar a construção de objetos de construção
complexa, composta por varios passos.

Então o cliente recupera instancias desta classe
de construção complexa através do builder.

=================================================
ex:

//Classe de construção complexa
public class Meal { 
 private List<Item> items = new ArrayList<Item>(); 
 
 public void addItem(Item item){ 
 items.add(item); 
 } 
 
 public float getCost(){ 
 float cost = 0.0f; 
 for (Item item : items) { 
 cost += item.price(); 
 } 
 return cost; 
 } 
 
 public void showItems(){ 
 for (Item item : items) { 
 System.out.print("Item : "+item.name()); 
 System.out.print(", Packing : "+item.packing().pack()); 
 System.out.println(", Price : "+item.price()); 
 } 
 } 
} 

//Builder
public class MealBuilder { 
 
 public Meal prepareVegMeal (){ 
 Meal meal = new Meal(); 
 meal.addItem(new VegBurger()); 
 meal.addItem(new Coke()); 
 return meal; 
 } 
 
 public Meal prepareNonVegMeal (){ 
 Meal meal = new Meal();  
 meal.addItem(new ChickenBurger()); 
 meal.addItem(new Pepsi()); 
 return meal; 
 } 
} 

//Utilização da classe
public class BuilderPatternDemo { 
 public static void main(String[] args) { 
 MealBuilder mealBuilder = new MealBuilder(); 
 
 Meal vegMeal = mealBuilder.prepareVegMeal(); 
 System.out.println("Veg Meal"); 
 vegMeal.showItems(); 
 System.out.println("Total Cost: " +vegMeal.getCost()); 
 
 Meal nonVegMeal = mealBuilder.prepareNonVegMeal(); 
 System.out.println("\n\nNon-Veg Meal"); 
 nonVegMeal.showItems(); 
 System.out.println("Total Cost: " +nonVegMeal.getCost()); 
 } 
} 
