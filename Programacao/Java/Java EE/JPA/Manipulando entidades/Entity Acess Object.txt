Entity Acess Object

Entity Acess Objects(EAO) são os componentes que formam uma interface para a
camada de persistencia JPA das aplicações e manipulam diretamente o entityManager,
se localizam entre a camada de negocio e o JPA, centralizando a utilização das APIs
JPA e abstraindo esta utilização da camada de negocio.

EAOs são os sucessores dos Data access Objects utilizados para abstrair código
JDBC, da camada de negócio com a diferença que os Data Transfer Objects(DTO) não
são mais necessários já que as entidades JPA funcionam como os DTOs transparentemente

Cada entidade deve possuir uma classe EAO relacionado a ela, que realize as operações de
persistencia necessárias, a criação de interfaces para EAOs é considerada uma boa prática,
criando a possibilidade de varias implementações diferentes de um mesmo EAO, para tecnologias
ORM diferentes, facilitando a migração.

Em um ambiente java EE classes EAO devem ser session beans, para a utilização de container
managed e dependency injection de EntityManagers, a utilização de beans stateless ou stateful
depende dos tipos de operações de persistência necessários.

Arquitetura:

View => Controller => Negócio(EJBs) => Entity Acess Objects => JPA => Banco de dados

======================================================================================
ex:

@Stateless
public class ItemEAOImpl implements ItemEAO {
	//Dependecy Injection do EntityManager
	@PersistenceContext(unitName="actionBazaar")
	private EntityManager entityManager;

	//Construtor vazio padrão
	public ItemEAOImpl() {}
	
	//Método que efetua INSERT apartir de dados e retorna a instancia de entidade persistida
	public Item addItem(String title, String description, byte[] picture, double initialPrice, long sellerId) {
		Item item = new Item();
		item.setTitle(title);
		item.setDescription(description);
		item.setPicture(picture);
		item.setInitialPrice(initialPrice);
		Seller seller = entityManager.find(Seller.class, sellerId); 
		item.setSeller(seller);
		entityManager.persist(item); 
		
		return item;
	}
	
	//Método que efetua UPDATE apartir de uma instancia de entidade
	public Item updateItem(Item item) {
		entityManager.merge(item);
		return item;
	}
	
	//Método que recebe uma entidade modificada por um cliente e
	//reseta os seus valores com o seu registro do banco de dados,
	//funciona como um botão reset para um formulario html
	public Item undoItemChanges(Item item) {
		entityManager.refresh(entityManager.merge(item)); 
		return item;
	}
	
	//Efetua o DELETE apartir da instancia da entidade
	public void deleteItem(Item item) {
		entityManager.remove(entityManager.merge(item));
	}
}
