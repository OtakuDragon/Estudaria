Try with resources(Java SE 7+ try-catch)

Apartir da versão 7 do java, o bom e velho try-catch
possui uma nova funcionalidade, um try with resources
é uma maneira de se resumir um try-finally utilizado
para fechar recursos com segurança, e possui a seguinte
sintaxe:

try(instanciação de recurso;...){
...
}catch(exceções){
...
}finally{
...
}

O que um try with resources faz de diferente é que ele 
fecha os recursos(chama .close()) que são instanciados
entre paranteses na sua declaração excluindo a necessidade
de se definir um finally só para fechar estes recursos.

Um bloco try-with resources pode ter clausula catch e finally,
sendo que o bloco finally é executado após o fechamento dos recursos.

Qualquer recurso pode ser utilizado com o try-with resources,
um recurso é uma classe que oferece algum tipo de conexão ou
stream e necessita fechamento após a sua utilização e implementa
a interface java.lang.AutoCloseable ou java.io.Closeable.
---------------------------------------------------------------------
ex:

 try (Statement stmt = con.createStatement()) {
        ResultSet rs = stmt.executeQuery(query);

        while (rs.next()) {
            String coffeeName = rs.getString("COF_NAME");
            int supplierID = rs.getInt("SUP_ID");
            float price = rs.getFloat("PRICE");
            int sales = rs.getInt("SALES");
            int total = rs.getInt("TOTAL");

            System.out.println(coffeeName + ", " + supplierID + ", " + 
                               price + ", " + sales + ", " + total);
        }
    } catch (SQLException e) {
        JDBCTutorialUtilities.printSQLException(e);
}
===================================================================
Varios recursos

Mais de um recurso pode ser utilizado com o try with resources
eles são separados no parenteses por ponto e virgula ";"

ex:

 try (ZipFile zf = new java.util.zip.ZipFile(zipFileName);
      BufferedWriter writer = java.nio.file.Files.newBufferedWriter(outputFilePath, charset)
    ) {
	...
	}
================================================================
Supressão de exceção

Os métodos close() dos recursos pode jogar exceções, se 
o codigo dentro do try jogar uma exceção e então algum método
close() tambem jogar uma exceção, o try with resources irá suprimir a
exceção do método close() e só tratar a da clausula try, estas
exceções suprimidas podem ser recuperadas atraves do método:

//Na exceção jogada
e.getSuppressed(); 

ex:

try(Statement stmt = con.createStatement()){

//Se uma exceção acontecer aqui qualquer exceção jogada
//por stmt.close() será suprimida
código...

}catch(Exception e){
	//Eu recupero um array destas exceções suprimidas com o método getSupressed() e posso joga-las,
	//para que elas não passem despercebidas.
	throw e.getSupressed()[0];
}

