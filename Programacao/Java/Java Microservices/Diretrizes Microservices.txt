Diretrizes Microservices
-------------------------------------------
Quando NÃO usar microservices

A arquitetura de microservices é uma arquitetura distribuida
indicada para aplicações que precisam ser muito resilientes(não cair) e escalaveis,
e incorre em um grande custo operacional para gerenciamento
(controle, monitoração e automação) de dezenas ou centenas de servidores
de aplicação diferentes.

Portanto, aplicações pequenas ou com poucos usuários,
que não precisam ter uma disponibilidade extremamente alta
não são indicadas para essa arquitetura já que os custos 
operacionais serão altos demais para mante-la comparada
a opção monolitica(PS: da pra ter uma aplicação monolitica 
modularizada apenas dentro de um mesmo pacote mas com módulos
bem definidos ou seja não distribuida).

Outro exemplo de aplicação que não se encaixa em uma arquitetura
distribuida de microservices são aplicações aonde o contexto transacional,
a consistencia dos dados e a performance são centrais ao negócio,
não existe um padrão tranacional para microservices, ele deve ser implementado
para cada aplicação o que dependendo da tolerância à inconsistencia pode se
tornar muito caro, em tempo de desenvolvimento e performance para valer a pena.

O ultimo exemplo de aplicação aonde microservices não se encaixa
é uma aplicação que faz consultas de agregação complexas entre multiplas
estruturas de dados o que vai trazer problemas de complexidade na
comunicação entre microservices por sua natureza distribuida o que
causará dificuldade no desenvolvimento e problemas de performance.

-------------------------------------------
Principios de um microservice

Um microservice deve ser completamente independentes
evite construir frameworks de microservices porque isso
pode ter um grande impacto nos custo de manutenção do sistema

O microservice deve ser o unico responsavel por manipular
os dados do dominio que o pertence, estruturas de dados não
devem ser compartilhadas entre microservices.

A interface de um microservice deve ser simples e intuitiva
para isso utilizar os padrão REST para definição de endpoints
definindo endpoints intuitivos e dentro do padrão HTTP e utilizar
JSON como protocolo.
-------------------------------------------
Como Decompor um sistema em microservices

Analise a descrição do que o sistema faz,
quais problemas de negócio ele atende e fique
atento aos seguintes pontos:

1. Substantivos utilizados, cada um deles ou um
   grupo deles pode vir a ser um microservice.

2. Verbos utilizados, pois eles representam
   interações entre serviços ou entre o usuário
   e os serviços.
   
3. Procure por coesão de dados, se em algum microservice
   planejado exista alguma entidade de negócio que é muito
   diferente das demais talvez ela seja um microservice separado.
   
---------------------------------------------
Como definir uma boa granularidade para uma arquitetura
de microservices

1. É melhor começar a arquitetura com poucos serviços
   e uma granularidade pequena e refatora-la para serviços
   menores com o tempo.
   
2. Tenha foco em como os serviços vão interagir entre si,
   defina as principais interfaces de interação entre eles,
   de uma forma logica, não crie micro serviços só por criar.
   
3. As responsabilidades dos serviços vão crescer com o tempo
   e o seu conhecimento do negocio vai aumentar, portanto evoluir
   para uma menor granularidade no futuro é melhor do que começar
   com muitos microserviços
------------------------------------------------
Como identificar problemas na granularidade de microservices

1. Microservices podem ser muito pequenos quando controlam apenas
   uma estrutura de dados e servem apenas como um CRUD basico, um 
   microservice deve ser uma expressão de regra de negócio e não
   uma abstração de CRUD.
   
2. Microservices podem ser muito grandes quando controlam mais do que 
   cinco estruturas de dados, possuem uma quantidade enorme de casos de teste
   unitário, ou em resumo tem muitas responsabilidades(Single responsability principle)

   
 
   
